---
import { Image } from 'astro:assets'
import HectorStandWhiteShirt from '../../assets/content/hector-stand-white-shirt.png'
---

<section id="contact" aria-label="Contact Form">
    <div class="contact">
    <h2>Contact me!</h2>
    <form action="https://formspree.io/f/mrblqqqv" id="contact-form" method="POST" class="contact-form" novalidate>
        <div class="name label">
            <input id="name" type="text" placeholder=" " required minlength="2" />
            <label for="name">Name/Company</label>
            <span class="error-message" aria-live="polite"></span>
        </div>
        <div class="email label">
            <input id="email" type="email" placeholder=" "name="email" required />
            <label for="email">Email</label>
            <span class="error-message" aria-live="polite"></span>
        </div>
        <div class="subject label">
            <input id="subject" type="text" name="subject" placeholder=" " required minlength="2" />
            <label for="subject">Subject</label>
            <span class="error-message" aria-live="polite"></span>
        </div>
        <div class="content label">
            <textarea id="content" class="content-input" name="content" placeholder=" " required minlength="10"></textarea>
            <label for="content">Content</label>
            <span class="error-message" aria-live="polite"></span>
        </div>
        <div class="buttons">
        <input type="submit" value="Send" class="submit-button button primary-button">
        <input type="button" id="reset-button" value="Delete" class="secondary-button button">
        </div>
        <p id="form-message" role="alert" aria-live="assertive"></p>
    </form>
    </div>
    <Image loading="lazy" format="webp" src={HectorStandWhiteShirt} class="contact-image" alt="Hector standing in a white sweatshirt" />
</section>


<script>
  const form = document.getElementById('contact-form');
  const resetBtn = document.getElementById('reset-button');
  const formMessage = document.getElementById('form-message');

  function showError(input, message) {
    const errorSpan = input.parentElement.querySelector('.error-message');
    if (errorSpan) {
      errorSpan.textContent = message;
    }
    input.setAttribute('aria-invalid', 'true');
  }

  function clearErrors() {
    form.querySelectorAll('.error-message').forEach(span => (span.textContent = ''));
    form.querySelectorAll('[aria-invalid]').forEach(el => el.removeAttribute('aria-invalid'));
    formMessage.textContent = '';
    formMessage.className = '';
  }

  function validateForm() {
    clearErrors();
    let valid = true;

    const name = form.elements['name'];
    if (!name.value.trim() || name.value.trim().length < 2) {
      showError(name, 'Please enter a valid name or company name (minimum 2 characters).');
      valid = false;
    }

    const email = form.elements['email'];
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!email.value.trim() || !emailRegex.test(email.value.trim())) {
      showError(email, 'Please enter a valid email address.');
      valid = false;
    }

    const subject = form.elements['subject'];
    if (!subject.value.trim() || subject.value.trim().length < 2) {
      showError(subject, 'Please enter a valid subject (minimum 2 characters).');
      valid = false;
    }

    const content = form.elements['content'];
    if (!content.value.trim() || content.value.trim().length < 10) {
      showError(content, 'Please write a content with at least 10 characters.');
      valid = false;
    }

    return valid;
  }

  function showFormMessage(text, type = 'error') {
    formMessage.textContent = text;
    formMessage.className = `show ${type}`;
    setTimeout(() => {
      formMessage.classList.remove('show', type);
      if (!formMessage.classList.contains('show')) {
        formMessage.textContent = '';
      }
    }, 4000);
  }

  form.addEventListener('submit', (e) => {
    e.preventDefault();
    if (!validateForm()) {
      showFormMessage('Please correct the errors in the form.', 'error');
      return;
    }

    fetch(form.action, {
      method: 'POST',
      body: new FormData(form),
      headers: {
        'Accept': 'application/json'
      }
    }).then(response => {
      if (response.ok) {
        showFormMessage('Message sent successfully!', 'success');
        form.reset();
      } else {
        showFormMessage('Error sending message. Please try again.', 'error');
      }
    }).catch(() => {
      showFormMessage('Network error. Check your connection.', 'error');
    });
  });

  resetBtn.addEventListener('click', () => {
    form.reset();
    clearErrors();
    formMessage.textContent = '';
    formMessage.className = '';
  });
</script>