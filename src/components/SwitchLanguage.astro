---
const languages = [
  { code: 'es', label: 'Castellano', flagCode: 'es' },
  { code: 'en', label: 'Inglés', flagCode: 'gb' },
];
const defaultLang = 'es';
---

<style>
.language-switch {
  position: relative;
  user-select: none;
  cursor: pointer;
  display: inline-block;
}

.selected {
  border-radius: 5px;
  background-color: var(--primary-color);
  color: var(--contrast-text-color);
  display: flex;
  align-items: center;
  justify-content: center;
  width: 18px;
  height: 10px;
  padding-bottom: 5px;
}

.options {
  position: absolute;
  top: 100%;
  right: 0;
  background: var(--primary-color);
  border-radius: 5px;
  box-shadow: 0 5px 8px rgba(0,0,0,0.15);
  margin-top: 0.3em;
  min-width: 100px;
  z-index: 10;
  display: none;
  flex-direction: column;
}

.options.show {
  display: flex;
}

.option {
  padding: 0.4em 0.8em;
  display: flex;
  align-items: center;
  gap: 0.5em;
  font-size: 1rem;
  color: var(--contrast-text-color);
}

.option:hover {
  background-color: var(--subtitle-color);
  color: var(--primary-color);
}

.flag-icon {
  width: 20px;
  height: 15px;
  border-radius: 3px;
}
</style>

<div class="language-switch" id="language-switch" tabindex="0" aria-haspopup="listbox" aria-expanded="false" aria-label="Seleccionar idioma">
  <div class="selected" id="selected-language" aria-live="polite">
    <span class={`flag-icon flag-icon-${languages.find(lang => lang.code === defaultLang)!.flagCode}`}></span>
  </div>
  <div class="options" id="language-options" role="listbox">
    {languages.map(({ code, label, flagCode }) => (
      <div
        class="option"
        data-lang={code}
        role="option"
        tabindex="0"
        aria-selected={code === defaultLang ? 'true' : 'false'}>
        <span class={`flag-icon flag-icon-${flagCode}`}></span> {label}
      </div>
    ))}
  </div>
</div>

<script>
  const switchEl = document.getElementById('language-switch')!;
  const selectedEl = document.getElementById('selected-language')!;
  const optionsEl = document.getElementById('language-options')!;
  let currentLang = '{defaultLang}';

  function toggleOptions() {
    const isOpen = optionsEl.classList.toggle('show')!;
    switchEl.setAttribute('aria-expanded', isOpen);
  }

  function closeOptions() {
    optionsEl.classList.remove('show');
    switchEl.setAttribute('aria-expanded', false);
  }

  function redirectToLang(lang) {
    const url = new URL(window.location.href);
    const path = url.pathname;

    if (lang === 'en') {
      // Si no empieza con /en/, lo añadimos
      if (!path.startsWith('/en/')) {
        url.pathname = '/en' + (path === '/' ? '/' : path);
      }
    } else {
      // Español: quitamos /en/ si está
      if (path.startsWith('/en/')) {
        url.pathname = path.replace(/^\/en/, '');
      }
    }

    // Redirigimos sólo si la URL cambió
    if (window.location.href !== url.toString()) {
      window.location.href = url.toString();
    }
  }

  selectedEl.addEventListener('click', () => {
    toggleOptions();
  });

  document.addEventListener('click', (e) => {
    if (!switchEl.contains(e.target)) {
      closeOptions();
    }
  });

  optionsEl.querySelectorAll('.option').forEach(option => {
    option.addEventListener('click', () => {
      const lang = option.getAttribute('data-lang')!;
      currentLang = lang;

      // Actualiza la bandera visible con ambas clases
      const flagCode = option.querySelector('span')!.className.split(' ').find(c => c.startsWith('flag-icon-'));
      selectedEl.innerHTML = `<span class="flag-icon ${flagCode}"></span>`;

      // Actualiza aria-selected en opciones
      optionsEl.querySelectorAll('.option').forEach(opt => {
        opt.setAttribute('aria-selected', opt === option ? 'true' : 'false');
      });

      closeOptions();

      redirectToLang(lang);
    });

    option.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        option.click();
      }
    });
  });

  switchEl.addEventListener('keydown', (e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      toggleOptions();
    }
    if (e.key === 'Escape') {
      closeOptions();
      selectedEl.focus();
    }
  });
</script>
